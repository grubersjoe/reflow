import prettier, { Options as PrettierOptions } from 'prettier';
import prettierFork from 'prettier-ts';

export const BLANK_LINE = /^[ \t]*$/;
export const LINE_BREAK = /\r?\n/;

export const BLOCK_COMMENTS = /\s*\/\*([\S\s]*?)\*\//gm;
export const LINE_COMMENTS = /\s*(?<![:|}])\/\/.*$/gm;

const BLOCK_COMMENT_AT_END_OF_LINE = /(?<!^|[^\S])[ \t]*\/\*.*\*\/$/;
const BLOCK_COMMENT_START = /^\s*\/\*/;
const BLOCK_COMMENT_END = /\s*\*\//;

const LINE_COMMENT_AT_BEGINNING_OF_LINE = /^[ \t]*\/\/.*$/;
const LINE_COMMENT_AT_END_OF_LINE = /(?<!^|[^\S]|:|})[ \t]*\/\/.*$/;

const FLOW_DIRECTIVE = /(@flow(\s+(strict(-local)?|weak))?|@noflow)/;

function getPrettierConfig(overrides?: PrettierOptions): PrettierOptions {
  return Object.assign(
    {},
    {
      semi: true,
      singleQuote: true,
      tabWidth: 2,
      trailingComma: 'all',
    },
    overrides,
  );
}

function getMatch(line: string, regexp: RegExp): string | null {
  const matches = line.match(regexp);

  return matches && matches.length === 1 ? matches[0] : null;
}

/**
 * Since Babel uses an *abstract* synax tree, all information about whitespace
 * is lost after parsing. Also Babel's `retainLines` option is not working as
 * expected and will produce broken syntax in some cases. Neither does Prettier
 * help here, because it won't add additional blank lines:
 *
 * https://prettier.io/docs/en/rationale.html#empty-lines
 *
 * Therefore, the following function tries to synchronize the blank lines and
 * comments of two source code fragments. This means: insert blank lines in
 * given code wherever the original code has them and copy all comments from
 * the source to the output. Comments are also handled here, because Babel does
 * not reliably retain their position in the generated code. This approach
 * naively assumes that all code transformations will result in (roughly) the
 * same amount of lines. It's not perfect, but the best I came up with and it
 * seems to work reasonably well in practice.
 */
export function syncBlankLinesAndComments(
  originalCode: Buffer | string,
  outputCode: string,
): string {
  const originalLines = originalCode
    .toString()
    .split(LINE_BREAK)
    .filter(line => !FLOW_DIRECTIVE.test(line));

  const outputLines = outputCode.split(LINE_BREAK).filter(line => !BLANK_LINE.test(line));

  let copyLine = false;

  originalLines.forEach((originalLine, line) => {
    const outputLine = outputLines[line];

    if (outputLine === undefined || originalLine === outputLine) {
      return;
    }

    // Insert an extra blank line if it's present in original file but not in output
    if (BLANK_LINE.test(originalLine)) {
      outputLines.splice(line, 0, '');
    }

    // Beginning of block comment: start copying lines
    if (BLOCK_COMMENT_START.test(originalLine)) {
      copyLine = true;
    }

    // Inside of a block comment - continue copying
    if (copyLine) {
      outputLines.splice(line, 0, originalLine);
    }

    // End of block comment - stop copying
    if (BLOCK_COMMENT_END.test(originalLine)) {
      copyLine = false;
    }

    // Append block comments appearing at the end of a line
    const blockCommentAtEndOfLine = getMatch(originalLine, BLOCK_COMMENT_AT_END_OF_LINE);
    if (blockCommentAtEndOfLine) {
      outputLines[line] = outputLine + blockCommentAtEndOfLine;
    }

    // Copy line comments that occupy an entire line
    if (LINE_COMMENT_AT_BEGINNING_OF_LINE.test(originalLine)) {
      outputLines.splice(line, 0, originalLine);
    }

    // Append line comments appearing at the end of a line
    const lineCommentAtEndOfLine = getMatch(originalLine, LINE_COMMENT_AT_END_OF_LINE);
    if (lineCommentAtEndOfLine) {
      outputLines[line] = outputLine + lineCommentAtEndOfLine;
    }
  });

  return outputLines.join('\n');
}

/**
 * Format the code generated by Babel to make it visually as similar as
 * possible to the original code. This is done by executing a forked version of
 * Prettier, inserting blank lines and copying comments from the original
 * source to the output.
 */
export function postProcessOutputCode(
  outputCode: string,
  originalCode: Buffer | string,
  prettierOptions: PrettierOptions = getPrettierConfig(),
): string {
  prettierOptions.parser = 'typescript';

  // Remove all comments, so that Prettier is able to collapse all lines as
  // much as possible.
  outputCode = outputCode.replace(BLOCK_COMMENTS, '');
  outputCode = outputCode.replace(LINE_COMMENTS, '');

  // This forked version of Prettier will *always* break ObjectExpressions into
  // multiple lines (even then they would fit into one line)
  originalCode = prettierFork.format(
    originalCode.toString(),
    getPrettierConfig({
      parser: 'babel',
      printWidth: Infinity,
    }),
  );

  outputCode = prettierFork.format(
    outputCode,
    getPrettierConfig({
      parser: 'typescript',
      printWidth: Infinity,
    }),
  );

  outputCode = syncBlankLinesAndComments(originalCode, outputCode);
  outputCode = prettier.format(outputCode, prettierOptions);

  return outputCode;
}
